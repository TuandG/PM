openapi: 3.0.3
info:
  title: User Management Service API
  description: API for managing users, authentication, and authorization in the Scrum Management System
  version: 1.0.0
  contact:
    name: Scrum Management Team
    email: support@scrummanagement.com

servers:
  - url: https://api.scrummanagement.com/user-service/v1
    description: Production server
  - url: https://staging-api.scrummanagement.com/user-service/v1
    description: Staging server

paths:
  /auth/register:
    post:
      summary: Register a new user
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
                - firstName
                - lastName
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  minLength: 8
                firstName:
                  type: string
                lastName:
                  type: string
                phone:
                  type: string
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: Invalid input data
        '409':
          description: Email already exists

  /auth/login:
    post:
      summary: User login
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                twoFactorCode:
                  type: string
                  description: Required if 2FA is enabled
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                  refreshToken:
                    type: string
                  user:
                    $ref: '#/components/schemas/UserResponse'
        '401':
          description: Invalid credentials
        '423':
          description: Account locked

  /auth/sso/{provider}:
    post:
      summary: SSO login with Google or GitHub
      tags:
        - Authentication
      parameters:
        - name: provider
          in: path
          required: true
          schema:
            type: string
            enum: [google, github]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - token
              properties:
                token:
                  type: string
                  description: OAuth token from provider
      responses:
        '200':
          description: SSO login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                  refreshToken:
                    type: string
                  user:
                    $ref: '#/components/schemas/UserResponse'

  /auth/2fa/enable:
    post:
      summary: Enable 2FA for user
      tags:
        - Two-Factor Authentication
      security:
        - bearerAuth: []
      responses:
        '200':
          description: 2FA setup information
          content:
            application/json:
              schema:
                type: object
                properties:
                  qrCode:
                    type: string
                  secret:
                    type: string

  /auth/2fa/verify:
    post:
      summary: Verify 2FA setup
      tags:
        - Two-Factor Authentication
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - code
              properties:
                code:
                  type: string
      responses:
        '200':
          description: 2FA enabled successfully

  /users/profile:
    get:
      summary: Get current user profile
      tags:
        - User Profile
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'

    put:
      summary: Update user profile
      tags:
        - User Profile
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                lastName:
                  type: string
                phone:
                  type: string
                avatarUrl:
                  type: string
      responses:
        '200':
          description: Profile updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'

  /users/{userId}:
    get:
      summary: Get user by ID
      tags:
        - Users
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: User retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '404':
          description: User not found

components:
  schemas:
    UserResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        firstName:
          type: string
        lastName:
          type: string
        phone:
          type: string
        avatarUrl:
          type: string
        isVerified:
          type: boolean
        twoFactorEnabled:
          type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    SSOProvider:
      type: object
      properties:
        userId:
          type: string
          format: uuid
        provider:
          type: string
          enum: [google, github]
        providerId:
          type: string
        email:
          type: string
          format: email

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT