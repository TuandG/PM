openapi: 3.0.3
info:
  title: Project Management Service API
  description: API for managing projects, members, and roles in the Scrum Management System
  version: 1.0.0
  contact:
    name: Scrum Management Team
    email: support@scrummanagement.com

servers:
  - url: https://api.scrummanagement.com/project-service/v1
    description: Production server
  - url: https://staging-api.scrummanagement.com/project-service/v1
    description: Staging server

paths:
  /projects:
    get:
      summary: Get all projects for current user
      tags:
        - Projects
      security:
        - bearerAuth: []
      parameters:
        - name: status
          in: query
          schema:
            type: string
            enum: [Active, Inactive, Completed]
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: Projects retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  projects:
                    type: array
                    items:
                      $ref: '#/components/schemas/ProjectResponse'
                  pagination:
                    $ref: '#/components/schemas/Pagination'

    post:
      summary: Create a new project
      tags:
        - Projects
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - startDate
                - endDate
              properties:
                name:
                  type: string
                description:
                  type: string
                startDate:
                  type: string
                  format: date
                endDate:
                  type: string
                  format: date
      responses:
        '201':
          description: Project created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectResponse'

  /projects/{projectId}:
    get:
      summary: Get project by ID
      tags:
        - Projects
      security:
        - bearerAuth: []
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Project retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectResponse'
        '404':
          description: Project not found

    put:
      summary: Update project
      tags:
        - Projects
      security:
        - bearerAuth: []
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                startDate:
                  type: string
                  format: date
                endDate:
                  type: string
                  format: date
                status:
                  type: string
                  enum: [Active, Inactive, Completed]
      responses:
        '200':
          description: Project updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectResponse'

    delete:
      summary: Delete project
      tags:
        - Projects
      security:
        - bearerAuth: []
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Project deleted successfully

  /projects/{projectId}/settings:
    get:
      summary: Get project settings
      tags:
        - Project Settings
      security:
        - bearerAuth: []
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Project settings retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectSettingResponse'

    put:
      summary: Update project settings
      tags:
        - Project Settings
      security:
        - bearerAuth: []
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                defaultSPLimit:
                  type: integer
                defaultReminderTime:
                  type: string
                  format: time
      responses:
        '200':
          description: Project settings updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectSettingResponse'

  /projects/{projectId}/members:
    get:
      summary: Get project members
      tags:
        - Project Members
      security:
        - bearerAuth: []
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Project members retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProjectMemberResponse'

    post:
      summary: Add member to project
      tags:
        - Project Members
      security:
        - bearerAuth: []
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - userId
                - role
              properties:
                userId:
                  type: string
                  format: uuid
                role:
                  type: string
      responses:
        '201':
          description: Member added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectMemberResponse'

  /projects/{projectId}/members/{userId}:
    put:
      summary: Update member role
      tags:
        - Project Members
      security:
        - bearerAuth: []
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - role
              properties:
                role:
                  type: string
      responses:
        '200':
          description: Member role updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectMemberResponse'

    delete:
      summary: Remove member from project
      tags:
        - Project Members
      security:
        - bearerAuth: []
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Member removed successfully

  /projects/{projectId}/invitations:
    get:
      summary: Get project invitations
      tags:
        - Invitations
      security:
        - bearerAuth: []
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: status
          in: query
          schema:
            type: string
            enum: [Accepted, Rejected, Pending, Canceled]
      responses:
        '200':
          description: Invitations retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/InvitationResponse'

    post:
      summary: Send project invitation
      tags:
        - Invitations
      security:
        - bearerAuth: []
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - userId
              properties:
                userId:
                  type: string
                  format: uuid
                expiredDate:
                  type: string
                  format: date-time
      responses:
        '201':
          description: Invitation sent successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvitationResponse'

  /projects/{projectId}/invitations/{invitationId}:
    put:
      summary: Update invitation status
      tags:
        - Invitations
      security:
        - bearerAuth: []
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: invitationId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - status
              properties:
                status:
                  type: string
                  enum: [Accepted, Rejected, Canceled]
      responses:
        '200':
          description: Invitation status updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvitationResponse'

  /projects/{projectId}/roles:
    get:
      summary: Get project roles
      tags:
        - Project Roles
      security:
        - bearerAuth: []
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Project roles retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProjectRoleResponse'

components:
  schemas:
    ProjectResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        startDate:
          type: string
          format: date
        endDate:
          type: string
          format: date
        status:
          type: string
          enum: [Active, Inactive, Completed]
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        createdBy:
          type: string
          format: uuid
        updatedBy:
          type: string
          format: uuid

    ProjectSettingResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        projectId:
          type: string
          format: uuid
        defaultSPLimit:
          type: integer
        defaultReminderTime:
          type: string
          format: time
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    ProjectMemberResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        projectId:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        role:
          type: string
        joinedAt:
          type: string
          format: date-time
        user:
          type: object
          properties:
            id:
              type: string
              format: uuid
            firstName:
              type: string
            lastName:
              type: string
            email:
              type: string
              format: email
            avatarUrl:
              type: string

    InvitationResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        projectId:
          type: string
          format: uuid
        expiredDate:
          type: string
          format: date-time
        status:
          type: string
          enum: [Accepted, Rejected, Pending, Canceled]
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    ProjectRoleResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        role:
          type: string
        permissions:
          type: array
          items:
            $ref: '#/components/schemas/PermissionResponse'

    PermissionResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        resource:
          type: string
        actions:
          type: string

    Pagination:
      type: object
      properties:
        page:
          type: integer
        limit:
          type: integer
        total:
          type: integer
        totalPages:
          type: integer

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT